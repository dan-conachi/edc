{
  "name": "parse-domain",
  "version": "0.2.1",
  "description": "Splits an url into sub-domain, domain and top-level-domain",
  "main": "./lib/parseDomain.js",
  "scripts": {
    "test": "mocha -R spec",
    "download-tld": "curl https://publicsuffix.org/list/effective_tld_names.dat > lib/build/tld.txt",
    "build-regex": "node lib/build/buildRegex.js",
    "update-regex": "npm run download-tld && npm run build-regex && npm run test"
  },
  "keywords": [
    "domain",
    "url",
    "sub-domain",
    "tld",
    "parse",
    "extract",
    "sanitize",
    "country",
    "top-level"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/peerigon/parse-domain.git"
  },
  "author": {
    "name": "peerigon",
    "email": "developers@peerigon.com"
  },
  "license": "Unlicense",
  "dependencies": {},
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.4.5"
  },
  "readme": "parse-domain\n============\n**Splits a URL into sub-domain, domain and the effective top-level domain.**\n\n[![](https://img.shields.io/npm/v/parse-domain.svg)](https://www.npmjs.com/package/parse-domain)\n[![](https://img.shields.io/npm/dm/parse-domain.svg)](https://www.npmjs.com/package/parse-domain)\n[![Dependency Status](https://david-dm.org/peerigon/parse-domain.svg)](https://david-dm.org/peerigon/parse-domain)\n\nSince domains are handled differently across different countries and organizations, splitting a URL into sub-domain, domain and top-level-domain parts is not a simple regexp. **parse-domain** uses a [large list of effective tld names](http://publicsuffix.org/list/effective_tld_names.dat) from publicsuffix.org to recognize different parts of the domain.\n\nPlease also read the note on [effective top-level domains](#note-on-effective-top-level-domains).\n\n<br />\n\nInstallation\n------------------------------------------------------------------------\n\n```sh\nnpm install --save parse-domain\n```\n\n<br />\n\nUsage\n------------------------------------------------------------------------\n\n```javascript\n// long subdomains can be handled\nexpect(parseDomain(\"some.subdomain.example.co.uk\")).to.eql({\n    subdomain: \"some.subdomain\",\n    domain: \"example\",\n    tld: \"co.uk\"\n});\n\n// usernames, passwords and ports are disregarded\nexpect(parseDomain(\"https://user:password@example.co.uk:8080/some/path?and&query#hash\")).to.eql({\n    subdomain: \"\",\n    domain: \"example\",\n    tld: \"co.uk\"\n});\n\n// non-canonical top-level domains are ignored\nexpect(parseDomain(\"unknown.tld.kk\")).to.equal(null);\n\n// invalid urls are also ignored\nexpect(parseDomain(\"invalid url\")).to.equal(null);\nexpect(parseDomain({})).to.equal(null);\n```\n\n### Introducing custom tlds\n\n```javascript\n// custom top-level domains can optionally be specified\nexpect(parseDomain(\"mymachine.local\",{ customTlds: [\"local\"] })).to.eql({\n    subdomain: \"\",\n    domain: \"mymachine\",\n    tld: \"local\"\n});\n\n// custom regexps can optionally be specified (instead of customTlds)\nexpect(parseDomain(\"localhost\",{ customTlds:/localhost|\\.local/ })).to.eql({\n    subdomain: \"\",\n    domain: \"\",\n    tld: \"localhost\"\n});\n```\n\nIt can sometimes be helpful to apply the customTlds argument using a helper function\n\n```javascript\nfunction parseLocalDomains(url) {\n    var options = {\n        customTlds: /localhost|\\.local/\n    };\n    return parseDomain(url, options);\n}\n\nexpect(parseLocalDomains(\"localhost\")).to.eql({\n    subdomain: \"\",\n    domain: \"\",\n    tld: \"localhost\"\n});\nexpect(parseLocalDomains(\"mymachine.local\")).to.eql({\n    subdomain: \"\",\n    domain: \"mymachine\",\n    tld: \"local\"\n});\n```\n\n<br />\n\nAPI\n------------------------------------------------------------------------\n\n### `parseDomain(url: String, options: ParseOptions): ParsedDomain|null`\n\nReturns `null` if `url` has an unknown tld or if it's not a valid url.\n\n#### `ParseOptions`\n```javascript\n{\n    customTlds: RegExp|String[]\n}\n```\n\n#### `ParsedDomain`\n```javascript\n{\n    tld: String,\n    domain: String,\n    subdomain: String\n}\n```\n\n<br />\n\nNote on effective top-level domains\n------------------------------------------------------------------------\n\nTechnically, the top-level domain is *always* the part after the last dot. That's why publicsuffix.org is a list of *effective* top-level domains: It lists all top-level domains where users are allowed to host any content. That's why `foo.blogspot.com` will be split into\n\n```javascript\n{\n    tld: \"blogspot.com\",\n    domain: \"foo\",\n    subdomain: \"\"\n}\n```\n\nSee also [#4](https://github.com/peerigon/parse-domain/issues/4)\n\n<br />\n\nLicense\n------------------------------------------------------------------------\n\nUnlicense\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peerigon/parse-domain/issues"
  },
  "_id": "parse-domain@0.2.1",
  "dist": {
    "shasum": "036c0e1b462a1a075d9d0dd9f365cc567cbee03a"
  },
  "_from": "parse-domain@",
  "_resolved": "https://registry.npmjs.org/parse-domain/-/parse-domain-0.2.1.tgz"
}
